
##############################################################################
#
# GitGub CI workflow syntax spec:
#    https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#
# CodeCov github action setup:
#    https://github.com/codecov/codecov-action
#
# CodeCov badge setup:
#    https://docs.codecov.com/docs/status-badges
#
# version 1.1
##############################################################################

name: Build

on:
  # Triggered whenever push to the main branch
  push:
    branches: [ "main" ]

  # Triggered whenever a pull request is created on main
  pull_request:
    branches: [ "main" ]
    types: [opened]

  # Allow manual trigger
  workflow_dispatch:

jobs:
  build:
    # Create a container of the latest Ubuntu, other values could be
    # ubuntu-latest, ubuntu-22.04, etc.
    runs-on: ubuntu-20.04
    
    steps:
      # We want to use GitHub CI checkout version 3 to check out our branch
      - name: Checking out
        uses: actions/checkout@v3
      
      
      - name: OpenCV
        run: git clone https://github.com/opencv/opencv.git https://github.com/ROBOTIS-GIT/turtlebot3_manipulation#foxy-devel
      
      - name: install 1
        run: mkdir -p build && cd build
      
      - name: install 2
        run: cmake ../opencv

      - name: install 3
        run: make -j4

      - name: install 4
        run: sudo make install

######################################

      - name: ROS Foxy
      - run : |
### Setup Locale
          locale  # check for UTF-8
          sudo apt update && sudo apt install locales
          sudo locale-gen en_US en_US.UTF-8
          sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
          export LANG=en_US.UTF-8
          locale  # verify settings

### Setup sources
          sudo apt install software-properties-common
          sudo add-apt-repository universe 

          sudo apt update && sudo apt install curl
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
          
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null

          sudo apt update
          sudo apt upgrade

          sudo apt install ros-foxy-desktop python3-argcomplete
          sudo apt install ros-dev-tools

          sudo apt install -y lcov


### Environment Setup
          source /opt/ros/foxy/setup.bash

      
      
      
      
      
      
      
      
      #   # working-directory: ${{github.workspace}}/matplotplusplus
      #   run: wget https://raw.githubusercontent.com/ROBOTIS-GIT/robotis_tools/master/install_ros2_foxy.sh

      # - name: Install 1
      #   # working-directory: ${{github.workspace}}/matplotplusplus
      #   run: sudo chmod 755 ./install_ros2_foxy.sh

      # - name: Install 2
      #   # working-directory: ${{github.workspace}}/matplotplusplus/build
      #   run: bash ./install_ros2_foxy.sh

#######################################
      - name: Gazebo
        # working-directory: ${{github.workspace}}/matplotplusplus/build
        run: sudo apt-get install ros-foxy-gazebo-*
      
      - name: Install 1
        # working-directory: ${{github.workspace}}/matplotplusplus/build
        run: sudo apt install ros-foxy-cartographer

      - name: Install 2
        # working-directory: ${{github.workspace}}/NumCpp
        run: sudo apt install ros-foxy-cartographer-ros

      - name: Install 3
        # working-directory: ${{github.workspace}}/NumCpp
        run: sudo apt install ros-foxy-navigation2

      - name: Install 4
        # working-directory: ${{github.workspace}}/NumCpp/build
        run: sudo apt install ros-foxy-nav2-bringup

      - name: Install 5
        # working-directory: ${{github.workspace}}/NumCpp/build
        run: sudo apt install ros-foxy-dynamixel-sdk

      - name: TurtleBot3
        run: sudo apt install ros-foxy-turtlebot3-msgs

      - name: Install 1
        run: sudo apt install ros-foxy-turtlebot3

      - name: OpenCV
        run: sudo apt-get install libboost-all-dev
      
      - name: Python Colcon Common Extensions
        run: sudo apt install -y ros-foxy-ros-base python3-colcon-common-extensions
###############git ad

      # # Install some system pacakges
      # - name: Install ROS 2 Humble packages
      #   run: |
      #     sudo apt update
      #     sudo apt install -y software-properties-common
      #     sudo add-apt-repository universe
      #     sudo apt update && sudo apt install -y curl
      #     sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \
      #       -o /usr/share/keyrings/ros-archive-keyring.gpg
      #     echo "deb [arch=$(dpkg --print-architecture) \
      #       signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \
      #       http://packages.ros.org/ros2/ubuntu \
      #       $(. /etc/os-release && echo $UBUNTU_CODENAME) main" \
      #       | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
      #     sudo apt update
      #     sudo apt install -y ros-humble-ros-base python3-colcon-common-extensions
      #     sudo apt install -y lcov

      # Build for test coverage
      - name: Configure CMake flags and build exectables
        run: |
          source /opt/ros/foxy/setup.bash
          colcon build --cmake-args -DCOVERAGE=1 --packages-select mario_com
          cat log/latest_build/mario_com/stdout_stderr.log
          find build/mario_com/ | grep -E 'gcno' # catch error -- exepct to see .gcno files
      
      # Run unit test and also check c++ code (and others) for style and static coding errors
      - name: Run unit test and check code error
        run: |
          source /opt/ros/foxy/setup.bash
          colcon test --packages-select mario_com
          cat log/latest_test/mario_com/stdout_stderr.log
          find build/maario_com/ | grep -E 'gcda' # catch error -- expect to see .gcda files
          colcon test-result --test-result-base build/mario_com/ # catch error

      # Generate code coverage test report
      - name: Generate test coverage report
        run: |
          source install/setup.bash
          ros2 run mario_com generate_coverage_report.bash
      
      # Upload coverage result to CodeCov
      - name: Upload coverage result to CodeCov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ${{github.workspace}}/install/mario_com/lib/mario_com/coverage_cleaned.info
          # flags: unittests # optional
          # directory: ${{github.workspace}}/install/
          # name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)      
