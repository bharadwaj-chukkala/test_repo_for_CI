
##############################################################################
#
# GitGub CI workflow syntax spec:
#    https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#
# CodeCov github action setup:
#    https://github.com/codecov/codecov-action
#
# CodeCov badge setup:
#    https://docs.codecov.com/docs/status-badges
#
# version 1.1
##############################################################################

name: Build

on:
  # Triggered whenever push to the main branch
  push:
    branches: [ "tester" ]

  # Triggered whenever a pull request is created on main
  pull_request:
    branches: [ "tester" ]
    types: [opened]

  # Allow manual trigger
  workflow_dispatch:

jobs:
  build:
    # Create a container of the latest Ubuntu, other values could be
    # ubuntu-latest, ubuntu-22.04, etc.
    runs-on: ubuntu-20.04
    
    steps:
      # We want to use GitHub CI checkout version 3 to check out our branches
      - name: Checking out
        uses: actions/checkout@v3

      - name: Git install
        run : |
          sudo apt-get install git
      
      - name: TB Manipulation
        run: |
          mkdir -p ~/foxy_ws/src
          cd ~/foxy_ws/src
          git cloneÂ https://github.com/ROBOTIS-GIT/turtlebot3_manipulation.git
          cd turtlebot3_manipulation
          git checkout foxy-devel
          cd ~/foxy_ws && colcon build --symlink-install

      - name: Navigation Stack
        run: |
          sudo apt install ros-foxy-nav2-map-server
          sudo apt install ros-foxy-navigation2
          sudo apt install ros-foxy-nav2-bringup
      
      # Install some system pacakges
      - name: Install ROS 2 Foxy packages
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt update && sudo apt install -y curl
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \
            -o /usr/share/keyrings/ros-archive-keyring.gpg
          
          echo "deb [arch=$(dpkg --print-architecture) \
            signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \
            http://packages.ros.org/ros2/ubuntu \
            $(. /etc/os-release && echo $UBUNTU_CODENAME) main" \
            | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt update
          sudo apt install ros-foxy-desktop python3-argcomplete
          sudo apt install -y lcov
          source /opt/ros/foxy/setup.bash

      # Install OpenCV
      - name: OpenCV
        run: |
          git clone https://github.com/opencv/opencv.git
          git -C opencv checkout 4.x
          mkdir -p build && cd build
          cmake ../opencv
          make -j4
          sudo make install


      - name: Gazebo and other ros installation
        run: |
          sudo apt-get install ros-foxy-gazebo-*
          sudo apt install ros-foxy-cartographer
          sudo apt install ros-foxy-cartographer-ros
          sudo apt install ros-foxy-dynamixel-sdk
           

      - name: Turtlebot3 installation
        run: |
          sudo apt install ros-foxy-turtlebot3-msgs
          sudo apt install ~ros-foxy-turtlebot3-.*
          sudo apt-get install gnuplot
          sudo apt-get install libboost-all-dev
          
        




      # Build for test coverage
      - name: Configure CMake flags and build exectables
        run: |
          source /opt/ros/foxy/setup.bash
          colcon build --cmake-args -DCOVERAGE=1 --packages-select mario_com
          cat log/latest_build/mario_com/stdout_stderr.log
          find build/mario_com/ | grep -E 'gcno' # catch error -- exepct to see .gcno files
      
      # Run unit test and also check c++ code (and others) for style and static coding errors
      - name: Run unit test and check code error
        run: |
          source /opt/ros/foxy/setup.bash
          colcon test --packages-select mario_com
          cat log/latest_test/mario_com/stdout_stderr.log
          find build/maario_com/ | grep -E 'gcda' # catch error -- expect to see .gcda files
          colcon test-result --test-result-base build/mario_com/ # catch error

      # Generate code coverage test report
      - name: Generate test coverage report
        run: |
          source install/setup.bash
          ros2 run mario_com generate_coverage_report.bash
      
      # Upload coverage result to CodeCov
      - name: Upload coverage result to CodeCov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ${{github.workspace}}/install/mario_com/lib/mario_com/coverage_cleaned.info
          # flags: unittests # optional
          # directory: ${{github.workspace}}/install/
          # name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)      
